#!/bin/bash
# 🚀 MCP Testing Suite - Zero Friction Launcher
# Just run ./START and everything works!

set -e

# Colors for pretty output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

echo "🚀 Starting MCP Testing Suite..."
echo "⏱️  This takes ~15 seconds..."
echo ""

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to find available port
find_available_port() {
    local port=$1
    while lsof -i :$port >/dev/null 2>&1; do
        port=$((port + 1))
    done
    echo $port
}

# Check for Python
if ! command_exists python3; then
    echo -e "${RED}❌ Python 3 is required but not found${NC}"
    echo "Please install Python 3 and try again"
    exit 1
fi

# Check if we're in the right directory
if [ ! -f "launcher/main.py" ]; then
    echo -e "${RED}❌ Please run this script from the MCP_Testing_Tools directory${NC}"
    echo "cd MCP_Testing_Tools && ./START"
    exit 1
fi

# Find available port (start from 8094)
LAUNCHER_PORT=$(find_available_port 8094)
if [ "$LAUNCHER_PORT" != "8094" ]; then
    echo -e "${YELLOW}⚠️  Port 8094 busy, using port $LAUNCHER_PORT${NC}"
fi

# Kill any existing launcher processes
echo "🧹 Cleaning up any existing processes..."
pkill -f "launcher/main.py" 2>/dev/null || true
sleep 1

# Create virtual environment if it doesn't exist
if [ ! -d ".venv" ]; then
    echo "📦 Creating virtual environment..."
    python3 -m venv .venv
fi

# Activate virtual environment
echo "🔌 Activating virtual environment..."
source .venv/bin/activate

# Install/upgrade dependencies
echo "⬇️  Installing dependencies..."
pip install --quiet --upgrade pip
pip install --quiet fastapi uvicorn requests aiofiles python-multipart

# Check for Docker (optional)
if command_exists docker; then
    echo "✅ Docker found - full functionality available"
    DOCKER_AVAILABLE="true"
else
    echo -e "${YELLOW}⚠️  Docker not found - some features will use mock mode${NC}"
    DOCKER_AVAILABLE="false"
fi

# Start the launcher
echo "🚀 Starting MCP Testing Suite launcher..."
echo ""

# Export environment variables
export MCP_TESTING_SUITE_DOCKER_AVAILABLE="$DOCKER_AVAILABLE"
export MCP_TESTING_SUITE_PORT="$LAUNCHER_PORT"
export MCP_TESTING_SUITE_AUTO_OPEN="true"

# Start launcher in background
cd launcher
python3 main.py --port="$LAUNCHER_PORT" --auto-open &
LAUNCHER_PID=$!

# Wait for launcher to start
echo "⏳ Waiting for launcher to start..."
sleep 3

# Check if launcher started successfully
if ! lsof -i :$LAUNCHER_PORT >/dev/null 2>&1; then
    echo -e "${RED}❌ Failed to start launcher${NC}"
    kill $LAUNCHER_PID 2>/dev/null || true
    exit 1
fi

# Success message
echo ""
echo -e "${GREEN}🎉 MCP Testing Suite is RUNNING!${NC}"
echo ""
echo -e "${BLUE}🌐 Web Interface: http://localhost:$LAUNCHER_PORT${NC}"
echo ""

# Try to open browser
if command_exists open; then
    # macOS
    open "http://localhost:$LAUNCHER_PORT" >/dev/null 2>&1 &
elif command_exists xdg-open; then
    # Linux
    xdg-open "http://localhost:$LAUNCHER_PORT" >/dev/null 2>&1 &
elif command_exists start; then
    # Windows
    start "http://localhost:$LAUNCHER_PORT" >/dev/null 2>&1 &
else
    echo "💡 Please open http://localhost:$LAUNCHER_PORT in your browser"
fi

echo "🎯 Choose your adventure:"
echo "   🧪 Interactive - Test MCP tools Postman-style"
echo "   🔧 API Mode - Headless testing & automation"
echo "   📊 Monitoring - Server health & performance"
echo "   🔒 Enterprise - Security & policy enforcement"
echo ""
echo -e "${YELLOW}💡 TIP: Try the demo modes if you don't have MCP servers yet!${NC}"
echo ""
echo "To stop: Press Ctrl+C or run: kill $LAUNCHER_PID"
echo ""

# Keep script running to handle Ctrl+C
trap "echo ''; echo '🛑 Stopping MCP Testing Suite...'; kill $LAUNCHER_PID 2>/dev/null || true; exit 0" INT

# Wait for launcher process
wait $LAUNCHER_PID